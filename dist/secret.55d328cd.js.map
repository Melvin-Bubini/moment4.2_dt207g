{"mappings":"AAAA,gBAAgB;AAChB;AAEA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,MAAM,QAAQ,eAAe,OAAO,CAAC;IAErC,IAAI,CAAC,OACD,gDAAgD;IAChD,OAAO,QAAQ,CAAC,IAAI,GAAG;SAEvB,6BAA6B;IAC7B,MAAM,2CAA2C;QAC7C,QAAQ;QACR,SAAS;YACL,gBAAgB;YAChB,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC;QACtC;IACJ,GACC,IAAI,CAAC,CAAA;QACF,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,yDAAyD;YACzD,eAAe,UAAU,CAAC;YAC1B,OAAO,QAAQ,CAAC,IAAI,GAAG;QAC3B,OACI,qCAAqC;QACrC;IAER,GACC,KAAK,CAAC;QACH,8CAA8C;QAC9C,eAAe,UAAU,CAAC;QAC1B,OAAO,QAAQ,CAAC,IAAI,GAAG;IAC3B;AAER;AAEA,eAAe;IACX,MAAM,SAAS;IAEf,IAAI;QACA,MAAM,QAAQ,eAAe,OAAO,CAAC;QACrC,IAAI,CAAC,OAAO;YACR,QAAQ,KAAK,CAAC;YACd;QACJ;QAEA,MAAM,WAAW,MAAM,MAAM,CAAC,EAAE,OAAO,OAAO,CAAC,EAAE;YAC7C,QAAQ;YACR,SAAS;gBACL,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC;gBAClC,gBAAgB;YACpB;QACJ;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,SAAS,EAAE,EAAE;YACb,2CAA2C;YAC3C,MAAM,iBAAiB,SAAS,cAAc,CAAC;YAC/C,IAAI,gBACA,eAAe,WAAW,GAAG,KAAK,OAAO;iBAEzC,QAAQ,KAAK,CAAC;QAEtB,OACI,QAAQ,KAAK,CAAC,KAAK,KAAK;IAEhC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;IACjD;AACJ","sources":["src/js/secretAuth.js"],"sourcesContent":["// secretAuth.js\r\n\"use strict\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const token = sessionStorage.getItem('jwtToken');\r\n\r\n    if (!token) {\r\n        // Ingen token, omdirigera till inloggningssidan\r\n        window.location.href = '/login.html';\r\n    } else {\r\n        // Validera token med servern\r\n        fetch('http://localhost:3000/api/validateToken', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            },\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                // Token är inte giltig, omdirigera till inloggningssidan\r\n                sessionStorage.removeItem('jwtToken');\r\n                window.location.href = '/login.html';\r\n            } else {\r\n                // Token är giltig, hämta hemlig data\r\n                getSecretData();\r\n            }\r\n        })\r\n        .catch(() => {\r\n            // Serverfel, omdirigera till inloggningssidan\r\n            sessionStorage.removeItem('jwtToken');\r\n            window.location.href = '/login.html';\r\n        });\r\n    }\r\n});\r\n\r\nasync function getSecretData() {\r\n    const apiUrl = 'http://localhost:3000/api';  \r\n\r\n    try {\r\n        const token = sessionStorage.getItem('jwtToken');\r\n        if (!token) {\r\n            console.error(\"Token saknas. Användaren är inte inloggad.\");\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(`${apiUrl}/secret`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n            // Visa meddelandet från backend på skärmen\r\n            const welcomeMessage = document.getElementById('welcomeMessage');\r\n            if (welcomeMessage) {\r\n                welcomeMessage.textContent = data.message;\r\n            } else {\r\n                console.error('Element with id \"welcomeMessage\" not found.');\r\n            }\r\n        } else {\r\n            console.error(data.error);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error fetching secret data:', error);\r\n    }\r\n}\r\n\r\n\r\n"],"names":[],"version":3,"file":"secret.55d328cd.js.map","sourceRoot":"/__parcel_source_root/"}