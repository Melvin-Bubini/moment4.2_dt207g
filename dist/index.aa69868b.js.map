{"mappings":"AAAA;AAGA,MAAM,SAAS;AAEf,eAAe;IACX,MAAM,WAAW,SAAS,cAAc,CAAC,qBAAqB,KAAK;IACnE,MAAM,WAAW,SAAS,cAAc,CAAC,qBAAqB,KAAK;IACnE,MAAM,YAAY,SAAS,cAAc,CAAC;IAC1C,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,MAAM,eAAe,SAAS,cAAc,CAAC;IAE7C,aAAa,QAAQ,GAAG,OAAO;QAC3B,MAAM,cAAc;QAEpB,sDAAsD;QACtD,IAAI,CAAC,YAAY,CAAC,UAAU;YACxB,UAAU,WAAW,GAAG;YACxB,QAAQ,2CAA2C;QACvD;QAEA,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE;gBAC/C,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;oBAAU;gBAAS;YAC9C;YAEA,IAAI,SAAS,EAAE,EAAE;gBACb,YAAY,WAAW,GAAG;gBAC1B,SAAS,cAAc,CAAC,qBAAqB,KAAK,GAAG;gBACrD,SAAS,cAAc,CAAC,qBAAqB,KAAK,GAAG;YACzD,OAAO;gBACH,MAAM,OAAO,MAAM,SAAS,IAAI,IAAI,qCAAqC;gBACzE,QAAQ,KAAK,CAAC,sBAAsB,KAAK,KAAK;gBAC9C,UAAU,WAAW,GAAG;YAC5B;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,sBAAsB;YACpC,UAAU,WAAW,GAAG;QAC5B;IAEJ;AACJ;AAGA,eAAe;IACX,MAAM,YAAY,SAAS,cAAc,CAAC;IAC1C,MAAM,YAAY,SAAS,cAAc,CAAC;IAC1C,MAAM,WAAW,SAAS,cAAc,CAAC,kBAAkB,KAAK;IAChE,MAAM,WAAW,SAAS,cAAc,CAAC,kBAAkB,KAAK;IAEhE,UAAU,gBAAgB,CAAC,UAAU,OAAO;QACxC,MAAM,cAAc;QAEpB,sDAAsD;QACtD,IAAI,CAAC,YAAY,CAAC,UAAU;YACxB,UAAU,WAAW,GAAG;YACxB,QAAQ,yCAAyC;QACrD;QAEA,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,CAAC,EAAE,OAAO,MAAM,CAAC,EAAE;gBAC5C,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;oBAAU;gBAAS;YAC9C;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,SAAS,EAAE,EAAE;gBACb,mCAAmC;gBACnC,eAAe,OAAO,CAAC,YAAY,KAAK,KAAK;gBAC7C,OAAO,QAAQ,CAAC,IAAI,GAAG,gBAAgB,yBAAyB;YACpE,OAAO;gBACH,QAAQ,KAAK,CAAC,KAAK,KAAK;gBACxB,UAAU,WAAW,GAAG,+CAAyC,mCAAmC;YACxG;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,qBAAqB;YACnC,UAAU,WAAW,GAAG,oCAAoC,+BAA+B;QAE/F;IACJ;AAEJ","sources":["src/js/main.js"],"sourcesContent":["\"use strict\";\r\n\r\n\r\nconst apiUrl = \"http://localhost:3000/api\";\r\n\r\nasync function register() {\r\n    const username = document.getElementById(\"register-username\").value;\r\n    const password = document.getElementById(\"register-password\").value;\r\n    const errorSpan = document.getElementById(\"errorSpan\");\r\n    const successSpan = document.getElementById(\"successSpan\");\r\n    const registerForm = document.getElementById('Form');\r\n\r\n    registerForm.onsubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Kontrollera om användarnamn eller lösenord är tomma\r\n        if (!username || !password) {\r\n            errorSpan.textContent = \"Användarnamn och lösenord måste anges\";\r\n            return; // Avbryt registreringen om fälten är tomma\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${apiUrl}/register`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({ username, password })\r\n            });\r\n\r\n            if (response.ok) {\r\n                successSpan.textContent = \"Lyckad registrering\";\r\n                document.getElementById(\"register-username\").value = \"\";\r\n                document.getElementById(\"register-password\").value = \"\";\r\n            } else {\r\n                const data = await response.json(); // Flytta denna rad inom else-blocket\r\n                console.error(\"Error registering:\", data.error);\r\n                errorSpan.textContent = \"Ett fel uppstod vid registrering\";\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error registering:\", error);\r\n            errorSpan.textContent = \"Ett fel uppstod vid registrering\";\r\n        }\r\n\r\n    };\r\n}\r\n\r\n\r\nasync function login() {\r\n    const loginForm = document.getElementById('Form');\r\n    const errorSpan = document.getElementById('errorSpan');\r\n    const username = document.getElementById('login-username').value;\r\n    const password = document.getElementById('login-password').value;\r\n\r\n    loginForm.addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Kontrollera om användarnamn eller lösenord är tomma\r\n        if (!username || !password) {\r\n            errorSpan.textContent = \"Användarnamn och lösenord måste anges\";\r\n            return; // Avbryt inloggningen om fälten är tomma\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${apiUrl}/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ username, password })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                // spara JWT token i sessionStorage\r\n                sessionStorage.setItem('jwtToken', data.token);\r\n                window.location.href = '/secret.html'; // ändra till secret.html\r\n            } else {\r\n                console.error(data.error);\r\n                errorSpan.textContent = \"Felaktigt användarnamn eller lösenord\"; // Visa felmeddelandet från servern\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging in:', error);\r\n            errorSpan.textContent = \"Ett fel uppstod vid inloggningen\"; // Visa generellt felmeddelande\r\n\r\n        }\r\n    });\r\n\r\n}\r\n"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}